package payloads

import "github.com/ovh/kmip-go"

func init() {
	kmip.RegisterOperationPayload[EncryptRequestPayload, EncryptResponsePayload](kmip.OperationEncrypt)
	kmip.RegisterOperationPayload[DecryptRequestPayload, DecryptResponsePayload](kmip.OperationDecrypt)
}

// This operation requests the server to perform an encryption operation on the provided data using a
// Managed Cryptographic Object as the key for the encryption operation.
//
// The request contains information about the cryptographic parameters (mode and padding method), the data to be encrypted,
// and the IV/Counter/Nonce to use. The cryptographic parameters MAY be omitted from the request as they can be specified as
// associated attributes of the Managed Cryptographic Object. The IV/Counter/Nonce MAY also be omitted from the request if the cryptographic
// parameters indicate that the server shall generate a Random IV on behalf of the client or the encryption algorithm does not need an IV/Counter/Nonce.
// The server does not store or otherwise manage the IV/Counter/Nonce.
//
// If the Managed Cryptographic Object referenced has a Usage Limits attribute then the server SHALL obtain an allocation from the current Usage Limits
// value prior to performing the encryption operation. If the allocation is unable to be obtained the operation SHALL return with a result status of
// Operation Failed and result reason of Permission Denied.
type EncryptRequestPayload struct {
	// The Unique Identifier of the Managed Cryptographic Object that is the key to
	// use for the encryption operation. If omitted, then the ID Placeholder value
	// SHALL be used by the server as the Unique Identifier.
	UniqueIdentifier string `ttlv:",omitempty"`
	// The Cryptographic Parameters (Block Cipher Mode, Padding Method, RandomIV) corresponding to the
	// particular encryption method requested. If omitted then the Cryptographic Parameters associated
	// with the Managed Cryptographic Object with the lowest Attribute Index SHALL be used. If there are no Cryptographic
	// Parameters associated with the Managed Cryptographic Object and the algorithm requires parameters then
	// the operation SHALL return with a Result Status of Operation Failed.
	CryptographicParameters *kmip.CryptographicParameters
	// The data to be encrypted (as a Byte String).
	Data []byte `ttlv:",omitempty"`
	// The initialization vector, counter or nonce to be used (where appropriate).
	IVCounterNonce []byte `ttlv:",omitempty"`
	// Specifies the existing stream or by-parts cryptographic operation (as returned from a previous call to this operation).
	//
	// The Correlation Value is used in requests and responses in cryptographic operations that support multi-
	// part (streaming) operations. This is generated by the server and returned in the first response to an
	// operation that is being performed across multiple requests. Note: the server decides which operations are
	// supported for multi-part usage. A server-generated correlation value SHALL be specified in any
	// subsequent cryptographic operations that pertain to the original operation.
	CorrelationValue []byte `ttlv:",omitempty,version=v1.3.."`
	// Initial operation as Boolean.
	//
	// The Init Indicator is used in requests in cryptographic operations that support multi-part (streaming)
	// operations. This is provided in the first request with a value of True to an operation that is being
	// performed across multiple requests.
	InitIndicator *bool `ttlv:",version=v1.3.."`
	// Final operation as Boolean.
	//
	// The Final Indicator is used in requests in cryptographic operations that support multi-part (streaming)
	// operations. This is provided in the final (last) request with a value of True to an operation that is being
	// performed across multiple requests.
	FinalIndicator *bool `ttlv:",version=v1.3.."`
	// Any additional data to be authenticated via the Authenticated Encryption Tag.
	// If supplied in multi-part encryption, this data MUST be supplied on the initial Encrypt request.
	//
	// The Authenticated Encryption Additional Data object is used in authenticated encryption and decryption
	// operations that require the optional additional data to be provided by the client.
	AuthenticatedEncryptionAdditionalData []byte `ttlv:",omitempty,version=v1.4.."`
}

func (pl *EncryptRequestPayload) Operation() kmip.Operation {
	return kmip.OperationEncrypt
}

// The response contains the Unique Identifier of the Managed Cryptographic Object used as the key and the result of the encryption operation.
type EncryptResponsePayload struct {
	// The Unique Identifier of the Managed Cryptographic Object that was the key used for the encryption operation.
	UniqueIdentifier string
	// The encrypted data (as a Byte String).
	Data []byte `ttlv:",omitempty"`
	// The value used if the Cryptographic Parameters specified Random IV and the IV/Counter/Nonce value was not provided in the request
	// and the algorithm requires the provision of an IV/Counter/Nonce.
	IVCounterNonce []byte `ttlv:",omitempty"`
	// Specifies the stream or by-parts value to be provided in subsequent calls to this operation for performing cryptographic operations.
	//
	// The Correlation Value is used in requests and responses in cryptographic operations that support multi-
	// part (streaming) operations. This is generated by the server and returned in the first response to an
	// operation that is being performed across multiple requests. Note: the server decides which operations are
	// supported for multi-part usage. A server-generated correlation value SHALL be specified in any
	// subsequent cryptographic operations that pertain to the original operation.
	CorrelationValue []byte `ttlv:",omitempty,version=v1.3.."`
	// Specifies the tag that will be needed to authenticate the decrypted data.
	// Only returned on completion of the encryption of the last of the plaintext by an authenticated encryption cipher.
	//
	// The Authenticated Encryption Tag object is used to validate the integrity of the data encrypted and
	// decrypted in Authenticated Encryption modes. It is an output from the encryption process and an input to
	// the decryption process. See [SP800-38D].
	AuthenticatedEncryptionTag []byte `ttlv:",omitempty,version=v1.4.."`
}

func (pl *EncryptResponsePayload) Operation() kmip.Operation {
	return kmip.OperationEncrypt
}

// This operation requests the server to perform a decryption operation on the provided data using a Managed Cryptographic Object as the key for the decryption operation.
//
// The request contains information about the cryptographic parameters (mode and padding method), the data to be decrypted, and the IV/Counter/Nonce to use.
// The cryptographic parameters MAY be omitted from the request as they can be specified as associated attributes of the Managed Cryptographic Object.
// The initialization vector/counter/nonce MAY also be omitted from the request if the algorithm does not use an IV/Counter/Nonce.
type DecryptRequestPayload struct {
	// The Unique Identifier of the Managed Cryptographic Object that is the key to use for the decryption operation.
	// If omitted, then the ID Placeholder value SHALL be used by the server as the Unique Identifier.
	UniqueIdentifier string `ttlv:",omitempty"`
	// The Cryptographic Parameters (Block Cipher Mode, Padding Method) corresponding to the particular decryption method requested.
	// If omitted then the Cryptographic Parameters associated with the Managed Cryptographic Object with the lowest Attribute Index SHALL be used.
	//
	// If there are no Cryptographic Parameters associated with the Managed Cryptographic Object and the algorithm requires parameters then
	// the operation SHALL return with a Result Status of Operation Failed.
	CryptographicParameters *kmip.CryptographicParameters
	// The data to be decrypted (as a Byte String).
	Data []byte `ttlv:",omitempty"`
	// The initialization vector, counter or nonce to be used (where appropriate).
	IVCounterNonce []byte `ttlv:",omitempty"`
	// Specifies the existing stream or by-parts cryptographic operation (as returned from a previous call to this operation).
	//
	// The Correlation Value is used in requests and responses in cryptographic operations that support multi-
	// part (streaming) operations. This is generated by the server and returned in the first response to an
	// operation that is being performed across multiple requests. Note: the server decides which operations are
	// supported for multi-part usage. A server-generated correlation value SHALL be specified in any
	// subsequent cryptographic operations that pertain to the original operation.
	CorrelationValue []byte `ttlv:",omitempty,version=v1.3.."`
	// Initial operation as Boolean.
	//
	// The Init Indicator is used in requests in cryptographic operations that support multi-part (streaming)
	// operations. This is provided in the first request with a value of True to an operation that is being
	// performed across multiple requests.
	InitIndicator *bool `ttlv:",version=v1.3.."`
	// Final operation as Boolean.
	//
	// The Final Indicator is used in requests in cryptographic operations that support multi-part (streaming)
	// operations. This is provided in the final (last) request with a value of True to an operation that is being
	// performed across multiple requests.
	FinalIndicator *bool `ttlv:",version=v1.3.."`
	// Additional data to be authenticated via the Authenticated Encryption Tag.
	// If supplied in multi-part decryption, this data MUST be supplied on the initial Decrypt request.
	//
	// The Authenticated Encryption Additional Data object is used in authenticated encryption and decryption
	// operations that require the optional additional data to be provided by the client.
	AuthenticatedEncryptionAdditionalData []byte `ttlv:",omitempty,version=v1.4.."`
	// Specifies the tag that will be needed to authenticate the decrypted data.
	// If supplied in multi-part decryption, this data MUST be supplied on the initial Decrypt request.
	//
	// The Authenticated Encryption Tag object is used to validate the integrity of the data encrypted and
	// decrypted in Authenticated Encryption modes. It is an output from the encryption process and an input to
	// the decryption process. See [SP800-38D].
	AuthenticatedEncryptionTag []byte `ttlv:",omitempty,version=v1.4.."`
}

func (pl *DecryptRequestPayload) Operation() kmip.Operation {
	return kmip.OperationDecrypt
}

// The response contains the Unique Identifier of the Managed Cryptographic Object used as the key and the result of the decryption operation.
type DecryptResponsePayload struct {
	// The Unique Identifier of the Managed Cryptographic Object that is the key used for the decryption operation.
	UniqueIdentifier string
	// The decrypted data (as a Byte String).
	Data []byte `ttlv:",omitempty"`
	// Specifies the stream or by-parts value to be provided in subsequent calls to this operation for performing cryptographic operations.
	//
	// The Correlation Value is used in requests and responses in cryptographic operations that support multi-
	// part (streaming) operations. This is generated by the server and returned in the first response to an
	// operation that is being performed across multiple requests. Note: the server decides which operations are
	// supported for multi-part usage. A server-generated correlation value SHALL be specified in any
	// subsequent cryptographic operations that pertain to the original operation.
	CorrelationValue []byte `ttlv:",omitempty,version=v1.3.."`
}

func (pl *DecryptResponsePayload) Operation() kmip.Operation {
	return kmip.OperationDecrypt
}
